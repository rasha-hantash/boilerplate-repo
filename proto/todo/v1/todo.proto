syntax = "proto3";

package proto.todo.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/rasha-hantash/boilerplate-repo/platform/api/gen/proto/todo/v1;todov1";

// Priority levels for todos
enum Priority {
  PRIORITY_UNSPECIFIED = 0;
  PRIORITY_LOW = 1;
  PRIORITY_MEDIUM = 2;
  PRIORITY_HIGH = 3;
}

// Todo represents a single todo item
message Todo {
  string id = 1;
  string title = 2;
  string description = 3;
  bool completed = 4;
  Priority priority = 5;
  string category = 6;
  google.protobuf.Timestamp due_date = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// CreateTodoRequest is the request for creating a new todo
message CreateTodoRequest {
  string title = 1;
  string description = 2;
  Priority priority = 3;
  string category = 4;
  google.protobuf.Timestamp due_date = 5;
}

// CreateTodoResponse is the response for creating a todo
message CreateTodoResponse {
  Todo todo = 1;
}

// GetTodoRequest is the request for getting a single todo
message GetTodoRequest {
  string id = 1;
}

// GetTodoResponse is the response for getting a todo
message GetTodoResponse {
  Todo todo = 1;
}

// ListTodosRequest is the request for listing todos
message ListTodosRequest {
  int32 page_size = 1;
  string page_token = 2;
  bool completed = 3;
  Priority priority = 4;
  string category = 5;
}

// ListTodosResponse is the response for listing todos
message ListTodosResponse {
  repeated Todo todos = 1;
  string next_page_token = 2;
}

// UpdateTodoRequest is the request for updating a todo
message UpdateTodoRequest {
  string id = 1;
  string title = 2;
  string description = 3;
  bool completed = 4;
  Priority priority = 5;
  string category = 6;
  google.protobuf.Timestamp due_date = 7;
}

// UpdateTodoResponse is the response for updating a todo
message UpdateTodoResponse {
  Todo todo = 1;
}

// DeleteTodoRequest is the request for deleting a todo
message DeleteTodoRequest {
  string id = 1;
}

// DeleteTodoResponse is the response for deleting a todo
message DeleteTodoResponse {}

// TodoService provides operations for managing todos
service TodoService {
  // CreateTodo creates a new todo
  rpc CreateTodo(CreateTodoRequest) returns (CreateTodoResponse) {}

  // GetTodo retrieves a single todo by ID
  rpc GetTodo(GetTodoRequest) returns (GetTodoResponse) {}

  // ListTodos retrieves a list of todos with optional filtering
  rpc ListTodos(ListTodosRequest) returns (ListTodosResponse) {}

  // UpdateTodo updates an existing todo
  rpc UpdateTodo(UpdateTodoRequest) returns (UpdateTodoResponse) {}

  // DeleteTodo deletes a todo by ID
  rpc DeleteTodo(DeleteTodoRequest) returns (DeleteTodoResponse) {}
}
